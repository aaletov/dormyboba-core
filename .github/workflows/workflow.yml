# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Commit

on:
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

env:
  POETRY_HOME: "/opt/poetry"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python3 -m venv $POETRY_HOME
        $POETRY_HOME/bin/pip install poetry==1.8.1
        $POETRY_HOME/bin/poetry --version
        $POETRY_HOME/bin/poetry install
    - name: Test with pytest
      run: |
        export ENV_PATH=$(${POETRY_HOME}/bin/poetry env info -p)
        ${ENV_PATH}/bin/pytest

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=short
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Store docker meta
        run: |
          echo '${{ steps.meta.outputs.json }}' > docker-meta.json
      - name: Upload docker meta
        uses: actions/upload-artifact@v4
        with:
          name: docker-meta
          path: docker-meta.json

  integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    needs: build
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download wiremock stubs
        run: |
          mkdir wiremock
          mkdir wiremock/mappings
          cd wiremock/mappings && \
            wget https://raw.githubusercontent.com/wiremock/api-template-library/main/api/G/googleapis.com/sheets/googleapis.com-sheets-metadata.json && \
            wget https://raw.githubusercontent.com/wiremock/api-template-library/main/api/G/googleapis.com/sheets/googleapis.com-sheets-stubs.json && \
            wget https://raw.githubusercontent.com/wiremock/api-template-library/main/api/G/googleapis.com/sheets/googleapis.com-sheets-swagger.json
      - name: Up docker compose
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./tests/integration/features/steps/docker-compose.yml"
        env:
          CORE_IMAGE: "ghcr.io/${{ github.repository }}:${{ github.head_ref }}"
          CORE_HOME: ${{ github.workspace }}
          WIREMOCK_DIR: ${{ github.workspace }}/wiremock
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry==1.8.1
          $POETRY_HOME/bin/poetry --version
          $POETRY_HOME/bin/poetry install
      - name: Test with behave
        run: |
          mkdir ${{ github.workspace }}/artifacts
          export ENV_PATH=$(${POETRY_HOME}/bin/poetry env info -p)
          ${ENV_PATH}/bin/behave --junit \
            --junit-directory ${{ github.workspace }}/artifacts/junit \
            ${{ github.workspace }}/tests/integration/features
      - name: Write compose logs
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: ${{ github.workspace }}/tests/integration/features/steps/docker-compose.yml
          compose-flags: "logs"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: integration-artifacts
          path: artifacts
